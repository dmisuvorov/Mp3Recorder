/**
 *  root script add :
 *  dependencies {*     classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
 *    classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'}**/
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

// 根节点添加
group = LIBRARY_GROUP
version = LIBRARY_VERSION;

// 根节点添加
install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                description LIBRARY_DESCRIPTION
                packaging 'aar'
                name LIBRARY_NAME
                url SITE_URL
                licenses {
                    license {
                        name POM_LICENSES_NAME
                        url POM_LICENSES_URL
                    }
                }
                developers {
                    developer {
                        id DEVELOPER_ID
                        name DEVELOPER_NAME
                        email DEVELOPER_MAIL
                    }
                }
                scm {
                    connection GIT_URL
                    developerConnection GIT_URL
                    url SITE_URL
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = "sources"
}

task javadoc(type: Javadoc) {
    android.libraryVariants.all { variant ->
        println variant.javaCompile.classpath.files
        if (variant.name == 'release') {
            task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
                // title = ''
                // description = ''
                source = variant.javaCompile.source
                classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
                options {
                    encoding "utf-8"
                    links "http://docs.oracle.com/javase/7/docs/api/"
                    linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
                }
                exclude '**/BuildConfig.java'
                exclude '**/R.java'
            }
            task("javadoc${variant.name.capitalize()}Jar", type: Jar, dependsOn: "generate${variant.name.capitalize()}Javadoc") {
                classifier = 'javadoc'
                from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
            }
            artifacts {
                archives tasks.getByName("javadoc${variant.name.capitalize()}Jar")
            }
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/7/docs/api"
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}


bintray {
    user = hasProperty('JCENTER_USERNAME')?JCENTER_USERNAME:System.getenv('JCENTER_USERNAME')
    key = hasProperty('JCENTER_USERNAME')?JCENTER_APIKEY:System.getenv('JCENTER_APIKEY')
    configurations = ['archives']
    pkg {
        repo = "maven"
        name = LIBRARY_NAME                // project name in jcenter
        websiteUrl = SITE_URL
        vcsUrl = GIT_URL
        licenses = [BINTRAY_LICENSES]
        publish = true
    }
}

bintrayUpload.dependsOn(javadocJar, sourcesJar, install)